//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PPAI
{
    using System;
    using System.Collections.Generic;
    
    public partial class Exposicion
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Exposicion()
        {
            this.DetalleExposicion = new HashSet<DetalleExposicion>();
            this.Obra = new HashSet<Obra>();
            this.PublicoDestino2 = new HashSet<PublicoDestino>();
        }
    
        public Nullable<System.DateTime> fechaFin { get; set; }
        public Nullable<System.DateTime> fechaFinReplanificada { get; set; }
        public Nullable<System.DateTime> fechaInicio { get; set; }
        public Nullable<System.DateTime> fechaInicioReplanificada { get; set; }
        public Nullable<System.TimeSpan> horaApertura { get; set; }
        public Nullable<System.TimeSpan> horaCierre { get; set; }
        public string nombre { get; set; }
        public int idExposicion { get; set; }
        public int idSede { get; set; }
        public Nullable<int> idTipoExposicion { get; set; }
        public Nullable<int> publicoDestino { get; set; }
    
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<DetalleExposicion> DetalleExposicion { get; set; }
        public virtual PublicoDestino PublicoDestino1 { get; set; }
        public virtual Sede Sede { get; set; }
        public virtual ExposicionesXSede ExposicionesXSede { get; set; }
        public virtual TipoExposicion TipoExposicion { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Obra> Obra { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<PublicoDestino> PublicoDestino2 { get; set; }

        public bool esVigente()
        {
            if (this.fechaFin is null)
            {
                return true;
            }
            return false;
        }

        //public List<Exposicion> buscarExposicionesTemporales(List<Exposicion> exposicionesVigentes)
        //{
        //    List<string> nombresPublicoDestino = new List<string>();
        //    List<Exposicion> exposicionesTemporalesVigentes = new List<Exposicion>();
        //    foreach (var expo in exposicionesVigentes)
        //    {
        //        if(this.TipoExposicion.esTemporal())
        //        {
        //            exposicionesTemporalesVigentes.Add(expo);
        //            nombresPublicoDestino.Add(this.PublicoDestino1.mostrarNombre());
        //        }
        //    }
        //    return (exposicionesTemporalesVigentes,nombresPublicoDestino);
        //}
        public bool buscarExposicionesTemporales(Exposicion exposicion)
        {
            if (exposicion.TipoExposicion.esTemporal())
            {
                return true;
            }
            return false;
        }

        public double calcularDuracionObrasExpuestas()
        {
            double duracionObras = 0;
            foreach (var detalle in DetalleExposicion)
            {
                duracionObras += detalle.buscarDuracionExtObra(detalle);
            }
            return duracionObras;
        }
    }
}
