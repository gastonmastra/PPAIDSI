//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PPAI.Model
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;

    public partial class Sede
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Sede()
        {
            this.Empleado = new HashSet<Empleado>();
            this.Exposicion = new HashSet<Exposicion>();
            this.ReservaVisita = new HashSet<ReservaVisita>();
        }
        [Key]
        public int idSede { get; set; }
        public Nullable<int> cantMaxPorGuia { get; set; }
        public string nombre { get; set; }
        public Nullable<int> cantMaximaVisitantes { get; set; }
    
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Empleado> Empleado { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Exposicion> Exposicion { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<ReservaVisita> ReservaVisita { get; set; }

        internal int getCantidadMaxVisitantes()
        {
            return (int)cantMaximaVisitantes;
        }

        public Sede getSede()
        {
            return this;
        }
        /// <summary>
        /// Devuelve una lista que contiene listas de strings
        /// </summary>
        /// <returns>
        /// Cada lista de strings contiene nombre, hora de apertura, hora de cierre, nombre de los publicos
        /// </returns>
        public List<List<string>> buscarExposicionesTempVigentes()
        {
            List<List<string>> exposicionesTemporalesVigentes = new List<List<string>>();
            foreach (var expo in Exposicion)
            {
                if (expo.esVigente())
                {
                    List<string> publicos = expo.buscarExposicionesTemporales();
                    string nombre = publicos[0];
                    string hsApertura = expo.mostrarHorarioApertura();
                    string hsCierre = expo.mostrarHorarioCierre();
                    string soloPublicos = "";
                    for (int i = 1; i < publicos.Count; i++)
                    {
                        soloPublicos += publicos[i] + " ";
                    };
                    List<string> array = new List<string>
                    {
                        nombre, hsApertura, hsCierre, soloPublicos
                    };
                    exposicionesTemporalesVigentes.Add(array);
                }
            }
            return exposicionesTemporalesVigentes;
        }
    }
}
