//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PPAI
{
    using System;
    using System.Collections.Generic;
    
    public partial class Sede
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Sede()
        {
            this.Empleado = new HashSet<Empleado>();
            this.Exposicion = new HashSet<Exposicion>();
            this.ReservaVisita = new HashSet<ReservaVisita>();
        }
    
        public int idSede { get; set; }
        public Nullable<int> cantMaxPorGuia { get; set; }
        public string nombre { get; set; }
        public Nullable<int> cantMaximaVisitantes { get; set; }
        PPAI2Entities db = new PPAI2Entities();
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Empleado> Empleado { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Exposicion> Exposicion { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<ReservaVisita> ReservaVisita { get; set; }

        public List<Exposicion> buscarExposicionesTempVigentes(Sede sede)
        {
            List<Exposicion> exposicionesVigentes = new List<Exposicion>();
            foreach (var exposicion in db.Exposicion)
            {
                if (exposicion.esVigente() && sede.idSede == exposicion.idSede && exposicion.buscarExposicionesTemporales(exposicion))
                {
                    exposicionesVigentes.Add(exposicion);
                }
            }
            return exposicionesVigentes;
        }

        public int calcularDuracionEstimadaVisita(List<Exposicion> exposiciones)
        {
            int duracion = 0;
            foreach (var expo in exposiciones)
            {
                duracion += expo.calcularDuracionObrasExpuestas();
            }
            return duracion;
        }

        public int getCantidadMaxVisitantes()
        {
            return this.cantMaximaVisitantes.Value;
        }

        public List<Empleado> mostrarEmpleado(Sede sedeSeleccionada, int horaReserva, DateTime fechaReserva, int duracion)
        {
            List<Empleado> empleados = new List<Empleado>();
            foreach (var empleado in db.Empleado)
            {
                if (empleado.idSede == sedeSeleccionada.idSede && empleado.mostrarCargo())
                {

                    empleados.Add(empleado);
                }
            }

            List<Empleado> guiasDisponibles = new List<Empleado>();
            foreach (var guia in empleados)
            {
                if (guia.trabajaDentroDiaYHorario(horaReserva, fechaReserva) && guia.tieneAsignacionParaDiaYHora(horaReserva, fechaReserva, duracion))
                {
                    guiasDisponibles.Add(guia);
                }
            }
            return empleados;
        }

        public int getCantMaxGuia()
        {
            return this.cantMaxPorGuia.Value;
        }

    }
}
